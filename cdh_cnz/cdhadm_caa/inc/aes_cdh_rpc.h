/*
 * Please do not edit this file.
 * It was generated using rpcgen.
 */

#ifndef _AES_CDH_RPC_H_RPCGEN
#define _AES_CDH_RPC_H_RPCGEN

#include <rpc/rpc.h>


#ifdef __cplusplus
extern "C" {
#endif

#define AES_IFO_OK 0
#define AES_IFO_NOK 1
#define AES_IFO_NOT_SENT 0
#define AES_IFO_MAYBE_SENT 1
#define AES_IFO_FILE_NAME_SIZE 512
#define AES_IFO_BLOCK_SIZE 32768

struct AES_IFO_BLOCK {
	char *mainfile_name;
	u_long subfile_no;
	u_long record_no;
	u_long maxsize;
	u_long sent_indicator;
	struct {
		u_int block_len;
		char *block_val;
	} block;
};
typedef struct AES_IFO_BLOCK AES_IFO_BLOCK;

enum answerCode {
	HANDLED = 0,
	UNHANDLED = 1,
};
typedef enum answerCode answerCode;

struct lastTransactionAnswer {
	answerCode code;
	u_long lastTransactionID;
};
typedef struct lastTransactionAnswer lastTransactionAnswer;

struct BlockInfo {
	char *theSourceID;
	u_long theBlockID;
	struct {
		u_int theBlockData_len;
		u_char *theBlockData_val;
	} theBlockData;
};
typedef struct BlockInfo BlockInfo;

typedef char *NewString;

#define AES_IFO_PROG 0x2df001f0
#define AES_IFO_VERS 1

#if defined(__STDC__) || defined(__cplusplus)
#define AES_IFO_OutPut 1
extern  u_long * aes_ifo_output_1(struct AES_IFO_BLOCK *, CLIENT *);
extern  u_long * aes_ifo_output_1_svc(struct AES_IFO_BLOCK *, struct svc_req *);
extern int aes_ifo_prog_1_freeresult (SVCXPRT *, xdrproc_t, caddr_t);

#else /* K&R C */
#define AES_IFO_OutPut 1
extern  u_long * aes_ifo_output_1();
extern  u_long * aes_ifo_output_1_svc();
extern int aes_ifo_prog_1_freeresult ();
#endif /* K&R C */

#define BGW_CDRB_RECEIVER BGW_RPC_PROG_NUMBER
#define A 1

#if defined(__STDC__) || defined(__cplusplus)
#define LASTTRANSACTION 1
extern  lastTransactionAnswer * lasttransaction_1(NewString *, CLIENT *);
extern  lastTransactionAnswer * lasttransaction_1_svc(NewString *, struct svc_req *);
#define PUT 2
extern  answerCode * put_1(BlockInfo *, CLIENT *);
extern  answerCode * put_1_svc(BlockInfo *, struct svc_req *);
extern int bgw_cdrb_receiver_1_freeresult (SVCXPRT *, xdrproc_t, caddr_t);

#else /* K&R C */
#define LASTTRANSACTION 1
extern  lastTransactionAnswer * lasttransaction_1();
extern  lastTransactionAnswer * lasttransaction_1_svc();
#define PUT 2
extern  answerCode * put_1();
extern  answerCode * put_1_svc();
extern int bgw_cdrb_receiver_1_freeresult ();
#endif /* K&R C */

/* the xdr functions */

#if defined(__STDC__) || defined(__cplusplus)
extern  bool_t xdr_AES_IFO_BLOCK (XDR *, AES_IFO_BLOCK*);
extern  bool_t xdr_answerCode (XDR *, answerCode*);
extern  bool_t xdr_lastTransactionAnswer (XDR *, lastTransactionAnswer*);
extern  bool_t xdr_BlockInfo (XDR *, BlockInfo*);
extern  bool_t xdr_NewString (XDR *, NewString*);

#else /* K&R C */
extern bool_t xdr_AES_IFO_BLOCK ();
extern bool_t xdr_answerCode ();
extern bool_t xdr_lastTransactionAnswer ();
extern bool_t xdr_BlockInfo ();
extern bool_t xdr_NewString ();

#endif /* K&R C */

#ifdef __cplusplus
}
#endif

#endif /* !_AES_CDH_RPC_H_RPCGEN */
